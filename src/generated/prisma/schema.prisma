// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Campaign {
  id                         String         @id @default(uuid())
  name                       String
  theme                      String
  tone                       Json
  homebrewAllowed            Boolean
  magicCommonality           String?
  geographicalScale          String?
  civilizationState          String?
  commonLandscapes           Json
  technologyLevel            String?
  roleOfReligion             String?
  religiousFiguresPerception String?
  majorConflictsThreats      String?
  createdAt                  DateTime       @default(now())
  updatedAt                  DateTime       @updatedAt
  cities                     CampaignCity[]
  npcs                       CampaignNPC[]
  items                      CampaignItem[]
}

model NPC {
  id          String        @id @default(uuid())
  name        String
  race        String
  class       String?
  alignment   String
  description String
  background  String
  personality String
  goals       Json
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  campaigns   CampaignNPC[]
}

model City {
  id               String         @id @default(uuid())
  name             String
  size             String
  population       Int
  government       String
  economy          String
  notableLocations Json
  description      String
  history          String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  campaigns        CampaignCity[]
}

model Item {
  id          String         @id @default(uuid())
  name        String
  type        String
  rarity      String
  description String
  properties  Json
  history     String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  campaigns   CampaignItem[]
}

// Join tables for many-to-many relationships
model CampaignCity {
  id         String   @id @default(uuid())
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId String
  city       City     @relation(fields: [cityId], references: [id], onDelete: Cascade)
  cityId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([campaignId, cityId])
}

model CampaignNPC {
  id         String   @id @default(uuid())
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId String
  npc        NPC      @relation(fields: [npcId], references: [id], onDelete: Cascade)
  npcId      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([campaignId, npcId])
}

model CampaignItem {
  id         String   @id @default(uuid())
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId String
  item       Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([campaignId, itemId])
}
